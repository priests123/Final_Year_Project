package uyr;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import javax.swing.*;
import javax.swing.text.*;

public class StatisticsGUI extends Component{

	private static final long serialVersionUID = 1L;
	private static Container rootWindow;
	private ActionsStatistics theCB = new ActionsStatistics();
	private JLabel lblIntro = new JLabel();
	private JLabel lblIntro2 = new JLabel();
	private JLabel lblIntro3 = new JLabel();
	private static JLabel errorMsg = new JLabel();
	private JButton theBtImport = new JButton(NamesStatistics.IMPORT);	
	private JButton theBtSearch = new JButton(NamesStatistics.SEARCH);
	private JButton theBtClear = new JButton(NamesStatistics.CLEAR);
	private JLabel logo = new JLabel();
	private JLabel lblRoute = new JLabel();
	private JLabel lblDateFrom = new JLabel();
	private JLabel lblTimeFrom = new JLabel();
	private JLabel lblDateTo = new JLabel();
	private JLabel lblTimeTo = new JLabel();
	private JComboBox<String> routeSelect = new JComboBox<String>();
	private JTextField tfDateFrom = new JTextField();
	private JButton theBtDateFrom = new JButton(NamesStatistics.DATEFROM);
	private JFrame frameDateFrom = new JFrame();
	private SpinnerDateModel smFrom = new SpinnerDateModel();
	private JSpinner timeFromSpinner = new JSpinner(smFrom);
	private JSpinner.DateEditor deFrom = new JSpinner.DateEditor(timeFromSpinner, "HH:mm:ss");
	private JTextField tfDateTo = new JTextField();
	private JButton theBtDateTo = new JButton(NamesStatistics.DATETO);
	private JFrame frameDateTo = new JFrame();
	private SpinnerDateModel smTo = new SpinnerDateModel();
	private JSpinner timeToSpinner = new JSpinner(smTo);
	private JSpinner.DateEditor deTo = new JSpinner.DateEditor(timeToSpinner, "HH:mm:ss");
	private static JTextPane dataView = new JTextPane();
	private static JScrollPane dataViewScroll = new JScrollPane(dataView);
	private static StyledDocument dataViewDoc = dataView.getStyledDocument();
	private JLabel lblRouteStatistics = new JLabel();
	private static JTextPane dataViewStats = new JTextPane();
	private static JScrollPane dataViewScrollStats = new JScrollPane(dataViewStats);
	private static StyledDocument dataViewDoc2 = dataViewStats.getStyledDocument();
	public static String routeSelected = "";
	public static String dateFrom = "";
	public static String timeFrom = "";
	public static String dateTo = "";
	public static String timeTo = "";
	public static String dateTimeFrom = "";
	public static String dateTimeTo = "";
	public Calendar cal = Calendar.getInstance();
	public Date dateStartSpinner = cal.getTime();
	public ArrayList<String> dropdownRouteValues = new ArrayList<String>();

	//Creates the SummaryGUI
	public StatisticsGUI(RootPaneContainer rpc) { 
		Container cp = rpc.getContentPane();
		rootWindow = (Container) rpc;
		cp.setLayout(null);
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		int height = screenSize.height;
		int width = screenSize.width;
		int H = 1000;
		int W = 1600;
		rootWindow.setSize(W, H);
		rootWindow.setLocation((width / 2 - W/2), (height / 2 - H/2) - H/40);
		
		lblIntro.setBounds(10, 10, 1200, 20);
		lblIntro.setText("Welcome to understanding your routes. To get started, use the below route, " + 
						 "date & time selectors to set your search parameters, then click search. " + 
						 "This displays all of the route");
		lblIntro.setFont(Global.font2);
		cp.add(lblIntro);
		
		lblIntro2.setBounds(10, 27, 1200, 20);
		lblIntro2.setText("information that is in the system in the top box, and a summary of the " + 
						  "statistics for the route based on this data at the bottom. To import new " + 
						  "data into the system, click the import");
		lblIntro2.setFont(Global.font2);
		cp.add(lblIntro2);
		
		lblIntro3.setBounds(10, 44, 1200, 20);
		lblIntro3.setText("button on the right hand side and follow the on screen instructions.");
		lblIntro3.setFont(Global.font2);
		cp.add(lblIntro3);
		
		logo.setIcon(new ImageIcon("logo.png"));
		logo.setBounds(1283, 0, 300, 150);
        cp.add(logo);
        
		lblRoute.setBounds(10, 95, 100, 30);
		lblRoute.setText("Routes");
		lblRoute.setFont(Global.font1);
		cp.add(lblRoute);
		
		lblDateFrom.setBounds(500, 95, 100, 30);
		lblDateFrom.setText("Date from");
		lblDateFrom.setFont(Global.font1);
		cp.add(lblDateFrom);
		
		lblTimeFrom.setBounds(645, 95, 100, 30);
		lblTimeFrom.setText("Time from");
		lblTimeFrom.setFont(Global.font1);
		cp.add(lblTimeFrom);
		
		lblDateTo.setBounds(785, 95, 100, 30);
		lblDateTo.setText("Date to");
		lblDateTo.setFont(Global.font1);
		cp.add(lblDateTo);
		
		lblTimeTo.setBounds(930, 95, 100, 30);
		lblTimeTo.setText("Time to");
		lblTimeTo.setFont(Global.font1);
		cp.add(lblTimeTo);
		
		errorMsg.setBounds(500, 60, 530, 30);
		errorMsg.setFont(Global.font1);
		errorMsg.setForeground(Color.RED);
		errorMsg.setHorizontalAlignment(SwingConstants.CENTER);
		errorMsg.setVerticalAlignment(SwingConstants.CENTER);
		cp.add(errorMsg);
		
		routeSelect.setBounds(10, 125, 450, 25);
		routeSelect.addActionListener(theCB);
		routeSelect.addItem("");
		routeSelect.setFont(Global.font2);
		dropdownRouteValues = RouteSelectValues.populateAllRoutes();	
		for(int a = 0; a < dropdownRouteValues.size(); a++){
			routeSelect.addItem(dropdownRouteValues.get(a));
		}
		cp.add(routeSelect);
		
		tfDateFrom.setBounds(500, 125, 100, 25);
		tfDateFrom.setFont(Global.font2);
		tfDateFrom.setEditable(false);
		cp.add(tfDateFrom);
		 
		theBtDateFrom.setBounds(600, 125, 30, 25);
		theBtDateFrom.addActionListener(theCB);
		theBtDateFrom.setFont(Global.font2);
		cp.add(theBtDateFrom);
		
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		dateStartSpinner = cal.getTime();
		
		timeFromSpinner.setValue(dateStartSpinner);
		timeFromSpinner.setEditor(deFrom);
		timeFromSpinner.setBounds(645, 125, 100, 25);
		timeFromSpinner.setFont(Global.font2);
		cp.add(timeFromSpinner);
		
		tfDateTo.setBounds(785, 125, 100, 25);
		tfDateTo.setFont(Global.font2);
		tfDateTo.setEditable(false);
		cp.add(tfDateTo);
		 
		theBtDateTo.setBounds(885, 125, 30, 25);
		theBtDateTo.addActionListener(theCB);
		theBtDateTo.setFont(Global.font2);
		cp.add(theBtDateTo);
		
		timeToSpinner.setValue(dateStartSpinner);
		timeToSpinner.setEditor(deTo);
		timeToSpinner.setBounds(930, 125, 100, 25);
		timeToSpinner.setFont(Global.font2);
		cp.add(timeToSpinner);
		
		theBtClear.setBounds(1070, 120, 100, 30);
		theBtClear.addActionListener(theCB);
		theBtClear.setFont(Global.font1);
		cp.add(theBtClear);
		
		theBtSearch.setBounds(1176, 120, 100, 30);
		theBtSearch.addActionListener(theCB);
		theBtSearch.setFont(Global.font1);
		cp.add(theBtSearch);
		
		theBtImport.setBounds(1176, 40, 100, 30);
		theBtImport.addActionListener(theCB);
		theBtImport.setFont(Global.font1);
		cp.add(theBtImport);
		
		dataViewScroll.setBounds(10, 170, 1560, 480);
		dataViewScroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
		dataViewScroll.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		
		dataView.setEditable(false);
		dataView.setFont(Global.font4);
		cp.add(dataViewScroll);
		
		lblRouteStatistics.setBounds(10, 665, 200, 30);
		lblRouteStatistics.setText("Route Statistics");
		lblRouteStatistics.setFont(Global.font1);
		cp.add(lblRouteStatistics);
		
		dataViewScrollStats.setBounds(10, 695, 1560, 250);
		dataViewScrollStats.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
		dataViewScrollStats.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		dataViewStats.setEditable(false);
		dataViewStats.setFont(Global.font4);
		cp.add(dataViewScrollStats);
		
		rootWindow.setVisible(true);
		
	}
	
	//Values for the button names
	class NamesStatistics {
		
		public static final String IMPORT = "Import";
		public static final String SEARCH = "Search";
		public static final String CLEAR = "Clear";
		public static final String DATEFROM = "...";
		public static final String DATETO = "...";
		
	}

	//The action listeners for the buttons
	class ActionsStatistics implements ActionListener{
		
		public void actionPerformed(ActionEvent ae) {
			String actionIs = ae.getActionCommand();
			Object o = ae.getSource();

			if(actionIs.equals(NamesStatistics.IMPORT)){
				rootWindow.setVisible(false);
				Main.displayImportGUI();
			}
		
			if(actionIs.equals(NamesStatistics.CLEAR)){
			routeSelect.setSelectedIndex(0);
			tfDateFrom.setText("");
			timeFromSpinner.setValue(dateStartSpinner);
			tfDateTo.setText("");
			timeToSpinner.setValue(dateStartSpinner);
			clearDataView();
			}
	
			if(o == theBtDateFrom){
				tfDateFrom.setText(new DatePicker(frameDateFrom, 660, 205, "Date from").setPickedDate());
			}
		
			if(o == theBtDateTo){
				tfDateTo.setText(new DatePicker(frameDateTo, 945, 205, "Date to").setPickedDate());
			}

			if(actionIs.equals(NamesStatistics.SEARCH)){
				routeSelected = routeSelect.getSelectedItem().toString();
				dateFrom = tfDateFrom.getText();
				timeFrom = deFrom.getFormat().format(timeFromSpinner.getValue());	
				dateTo = tfDateTo.getText();
				timeTo = deTo.getFormat().format(timeToSpinner.getValue());
				if(CheckSearch.checkSearchTerms(routeSelected, dateFrom, timeFrom, dateTo, timeTo)){
					dateTimeFrom = tfDateFrom.getText() + " " + deFrom.getFormat().format(timeFromSpinner.getValue());
					dateTimeTo = tfDateTo.getText() + " " + deTo.getFormat().format(timeToSpinner.getValue());
					new DataForDisplay(routeSelected, dateTimeFrom, dateTimeTo);
			}
		}		
	}
		
	}
	
	//Sets the statisticsGUI visible
	public static void setStatisticsGUIVisible(){
		rootWindow.setVisible(true);
	}
	
	//Sets the error message
	public static void setErrorMsg(String msg){
		errorMsg.setText(msg);
	}

	//Adds values to the DataView with font size 16
	public static void addToDataViewFont1(String toPrint){
		Style style = dataView.addStyle("", null);
		StyleConstants.setFontSize(style, 16);
		StyleConstants.setBold(style, true);
		try {
			dataViewDoc.insertString(dataViewDoc.getLength(), toPrint, style);
		} catch (BadLocationException e) {
			e.printStackTrace();
		}
	}

	//Adds values to the DataView with font size 12
	public static void addToDataViewFont2(String toPrint){
		Style style = dataView.addStyle("", null);
		StyleConstants.setFontSize(style, 12);
		try {
			dataViewDoc.insertString(dataViewDoc.getLength(), toPrint, style);
		} catch (BadLocationException e) {
			e.printStackTrace();
		}
	}

	//Adds values to the DataViewStats with font size 16
	public static void addToDataViewStatsFont1(String toPrint){
		Style style = dataViewStats.addStyle("", null);
		StyleConstants.setFontSize(style, 16);
		StyleConstants.setBold(style, true);
		try {
			dataViewDoc2.insertString(dataViewDoc2.getLength(), toPrint, style);
		} catch (BadLocationException e) {
			e.printStackTrace();
		}
	}
	
	//Adds values to the DataViewStats with font size 12
	public static void addToDataViewStatsFont2(String toPrint){
		Style style = dataViewStats.addStyle("", null);
		StyleConstants.setFontSize(style, 12);
		try {
			dataViewDoc2.insertString(dataViewDoc2.getLength(), toPrint, style);
		} catch (BadLocationException e) {
			e.printStackTrace();
		}
	}

	//Clears everything from both dataViews's
	public static void clearDataView(){
		dataView.setText("");
		dataViewStats.setText("");
	}
	
	//Sets the scroll position to the top
	public static void setScrollPos(){
		dataView.setCaretPosition(0);
		dataViewStats.setCaretPosition(0);
	}
	
}
