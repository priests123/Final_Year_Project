package RailData;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.TimeZone;

public class OffOnPeakStats {

	static int offPeakCount = 0;
	static int onPeakCount = 0;
	long offPeakTotalTime = 0;
	long onPeakTotalTime = 0;
	
	
	public OffOnPeakStats(ArrayList<ArrayList<Object>> routeStasticsData, int count)
	{
		SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
		sdf.setTimeZone(TimeZone.getTimeZone("GMT"));
		try{
		for (int a = 2; a < routeStasticsData.get(count).size(); a = a + 3) {
			int currentHour = ((Date) routeStasticsData.get(count).get(a)).getHours();
			if((currentHour >= 6 && currentHour < 9)|| (currentHour >= 16 && currentHour < 19)){
				try{
					Date time = sdf.parse(routeStasticsData.get(count).get(a-1).toString());
					long timeInMilSec = time.getTime();
					onPeakTotalTime = onPeakTotalTime + timeInMilSec;
					onPeakCount++;
				}catch(ParseException e){}
			}else{
				try{
					Date time = sdf.parse(routeStasticsData.get(count).get(a-1).toString());
					long timeInMilSec = time.getTime();
					offPeakTotalTime = offPeakTotalTime + timeInMilSec;
					offPeakCount++;
				}catch(ParseException e){}
			}
		}
		}catch(IndexOutOfBoundsException e){}
		
		//System.out.println(onPeakTotalTime);
		for (int b = 2; b < routeStasticsData.get(count).size(); b = b + 3) {
		
		}
		
		String offPeakReturn = null;
		String onPeakReturn = null;
		long offAverage = 0;
		long onAverage = 0;
		
		if(offPeakCount != 0){
			offAverage = offPeakTotalTime / offPeakCount;
			offPeakReturn = sdf.format(offAverage);
		}else{
			offPeakReturn = "N/A";
		}
		if(onPeakCount != 0){
			onAverage = onPeakTotalTime / onPeakCount;
			onPeakReturn = sdf.format(onAverage);
		}else{
			onPeakReturn = "N/A";
		}
		
		double diffBetweenOffOn = 0;
		if((onPeakCount != 0)) 
		{
			if(offPeakCount != 0) 
			{
				int diff = (int) (onAverage - offAverage);
				//diff
				double percentage = (double) diff/onAverage;
				//System.out.println(percentage);
				diffBetweenOffOn = (percentage * 100);
			}
		}
		
		String returnDiff = null;
		if(diffBetweenOffOn == 0)
			returnDiff = "N/A";
		else
			returnDiff = String.format("%.1f",diffBetweenOffOn); 
	}
	
	public static int getOffPeakCount()
	{
		return offPeakCount;
		
	}
	
	public static int getOnPeakCount()
	{
		return onPeakCount;
		
	}
}
