package Display;

import importToDB.FormatFile;
import importToDB.ReadInFile;
import importToDB.SQLDatabase;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.*;

import Display.StatisticsGUI.Actions;
import Display.StatisticsGUI.Names;

public class ImportGUI {
	
	private static String fileToImportLocation = null;

	class Names {
		public static final String IMPORT = "Import";
		public static final String CANCEL = "Cancel";
		public static final String BROWSE = "Browse";
	}
	
	private JButton theBtBrowse = new JButton(Names.BROWSE);
	private JButton theBtImport = new JButton(Names.IMPORT);
	private JLabel browseLabel = new JLabel();
	private Actions theCB = new Actions();
	private JLabel errorMsg = new JLabel();
	private JLabel introMsg = new JLabel();
	private JLabel introMsg2 = new JLabel();
	
	public ImportGUI(RootPaneContainer rpc) {
		
		Container cp = rpc.getContentPane();
		Container rootWindow = (Container) rpc;
		cp.setLayout(null);
		
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		
		int height = screenSize.height;
		int width = screenSize.width;
		
		int H = height/2;
		int W = (width/2) - (width/8);
		
		System.out.println(H);
		System.out.println(W);
		
		rootWindow.setSize(W, H);
		rootWindow.setLocation((width / 2 - W/2), (height / 2 - H/2));
		
		
		//browseTextArea.setEditable(false);
		browseLabel.setBounds(220, 120, 420, 30);
		browseLabel.setText("No file selected");
		browseLabel.setHorizontalAlignment(SwingConstants.CENTER);
		browseLabel.setVerticalAlignment(SwingConstants.CENTER);
		browseLabel.setBackground(Color.WHITE);
		browseLabel.setOpaque(true);
		browseLabel.setFont(new Font("Arial", Font.PLAIN, 16));
		cp.add(browseLabel);
		
		theBtBrowse.setBounds(60, 120, 100, 30);
		theBtBrowse.addActionListener(theCB);
		cp.add(theBtBrowse);
		
		theBtImport.setBounds(150, 410, 100, 30);
		theBtImport.addActionListener(theCB);
		cp.add(theBtImport);
		
		errorMsg.setBounds(150, 300, 300, 30);
		cp.add(errorMsg);
		
		//introMsg.setFont(new Font("Arial", Font.PLAIN, 30));
		introMsg.setBounds(60, 20, 580, 30);
		introMsg.setText("Please select a file to upload to the system by clicking the browse button below. Please ensure that");
		introMsg.setBackground(Color.WHITE);
		introMsg.setOpaque(true);
		cp.add(introMsg);
		introMsg2.setBounds(60, 40, 580, 30);
		introMsg2.setText("it's a CSV file, it's the correct format and it's not been uploaded before");
		introMsg2.setBackground(Color.WHITE);
		introMsg2.setOpaque(true);
		cp.add(introMsg2);
		
		
		
		
		rootWindow.setVisible( true );    
		
	}
	
	class Actions implements ActionListener{
		public void actionPerformed(ActionEvent ae) {
			String actionIs = ae.getActionCommand();
			errorMsg.setText("");
			if(actionIs.equals(Names.BROWSE)){
				OpenFile of = new OpenFile();
				of.filePicked();
				int fileNameIndex = of.sb.toString().lastIndexOf("\\");
				browseLabel.setText(of.sb.substring(fileNameIndex + 1));
				fileToImportLocation = of.sb.toString();
			}
			
			if(actionIs.equals(Names.IMPORT)){
				if(checkFile.checkCSVType(fileToImportLocation)){
					if(checkFile.checkCSVFormat()){
						if(checkFile.checkNotDuplicate()){						
							FormatFile.FormatCSV(checkFile.getFormattedFileLocation());
						}else{
							errorMsg.setText("This file has already been uploaded, please select another");
						}
					}else{
						errorMsg.setText("Please ensure the file is correctly formatted");
					}
				}else{
					errorMsg.setText("This file isn't a CSV file, please select one");
				}
			}
			
		}
	}

	
	
	
	
}
